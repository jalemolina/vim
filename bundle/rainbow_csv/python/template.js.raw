fs = require('fs')
readline = require('readline');
rbql_utils = require('__RBQLMP__rbql_home_dir/rbql_utils.js')

var csv_encoding = '__RBQLMP__csv_encoding';

var input_delim = '__RBQLMP__input_delim';
var join_delim = '__RBQLMP__join_delim';
var output_delim = '__RBQLMP__output_delim';

var join_table_path = __RBQLMP__rhs_table_path;


function exit_with_error_msg(error_msg) {
    var report = new Object();
    report.error = error_msg
    process.stderr.write(JSON.stringify(report));
    process.exit(1);
}


function quote_field(src, delim) {
    if (src.indexOf('"') != -1 || src.indexOf(delim) != -1) {
        var escaped = src.replace(/"/g, '""');
        escaped = '"' + escaped + '"';
        return escaped;
    }
    return src;
}


function quoted_join(fields, delim) {
    var quoted_fields = fields.map(function(v) { return quote_field(String(v), delim); });
    return quoted_fields.join(delim);
}


function simple_join(fields, delim) {
    var res = fields.join(delim);
    if (fields.join('').indexOf(delim) != -1) {
        var error_msg = 'Some result set fields already contain output delim. Use different output format e.g. "csv"\n';
        error_msg += 'Example of defective output line: ' + res;
        exit_with_error_msg(error_msg);
    }
    return res;
}


output_join = null
if ('__RBQLMP__output_policy' == 'simple') {
    output_join = simple_join;
} else if ('__RBQLMP__output_policy' == 'quoted') {
    output_join = quoted_join;
} else {
    exit_with_error_msg('unknown output csv policy');
}


input_split = null
if ('__RBQLMP__input_policy' == 'simple') {
    input_split = function(line) { return [line.split(input_delim), false]; }
} else if ('__RBQLMP__input_policy' == 'quoted') {
    input_split = function(line) { return rbql_utils.split_quoted_str(line, input_delim); }
} else if ('__RBQLMP__input_policy' == 'monocolumn') {
    input_split = function(line) { return [[line], false]; }
} else {
    exit_with_error_msg('unknown input csv policy');
}

join_impl = null
if ('__RBQLMP__join_policy' == '') {
    join_split = function(line) { return [null, null]; }
} else if ('__RBQLMP__join_policy' == 'simple') {
    join_split = function(line) { return [line.split(join_delim), false]; }
} else if ('__RBQLMP__join_policy' == 'quoted') {
    join_split = function(line) { return rbql_utils.split_quoted_str(line, join_delim); }
} else if ('__RBQLMP__join_policy' == 'monocolumn') {
    join_split = function(line) { return [[line], false]; }
} else {
    exit_with_error_msg('unknown join csv policy');
}


function strip_cr(line) {
    if (line.charAt(line.length - 1) === '\r') {
        return line.substring(0, line.length - 1);
    }
    return line;
}


var lineReader = null;
var src_table_path = __RBQLMP__src_table_path;
if (src_table_path != null) {
    lineReader = readline.createInterface({ input: fs.createReadStream(src_table_path, {encoding: csv_encoding}) });
} else {
    process.stdin.setEncoding(csv_encoding);
    lineReader = readline.createInterface({ input: process.stdin });
}

var dst_stream = null;
var dst_table_path = __RBQLMP__dst_table_path;
if (dst_table_path != null) {
    dst_stream = fs.createWriteStream(dst_table_path, {defaultEncoding: csv_encoding});
} else {
    process.stdout.setDefaultEncoding(csv_encoding);
    dst_stream = process.stdout;
}


var NR = 0;

var join_fields_info = new Object();
var input_fields_info = new Object();
var null_value_in_output = false;
var defective_csv_line_in_input = 0
var defective_csv_line_in_join = 0


function add_to_set(dst_set, value) {
    // https://stackoverflow.com/a/27427447/2898283
    // TODO run tests to compare performance
    var len_before = dst_set.size;
    dst_set.add(value);
    return len_before != dst_set.size;
}


function stable_compare(a, b) {
    for (var i = 0; i < a.length; i++) {
        if (a[i] !== b[i])
            return a[i] < b[i] ? -1 : 1;
    }
}


function SimpleWriter(dst) {
    this.dst = dst;
    this.NW = 0;
    this.write = function(record) {
        if (__RBQLMP__top_count !== null && this.NW >= __RBQLMP__top_count)
            return false;
        this.dst.write(record);
        this.dst.write('\n');
        this.NW += 1;
        return true;
    }
    this.finish = function() {}
}


function UniqWriter(dst) {
    this.dst = dst;
    this.seen = new Set();
    this.NW = 0;
    this.write = function(record) {
        if (__RBQLMP__top_count !== null && this.NW >= __RBQLMP__top_count)
            return false;
        if (add_to_set(this.seen, record)) {
            this.dst.write(record);
            this.dst.write('\n');
            this.NW += 1;
        }
        return true;
    }
    this.finish = function() {}
}


function UniqCountWriter(dst) {
    this.dst = dst;
    this.records = new Map();
    this.write = function(record) {
        var old_val = this.records.get(record);
        if (old_val) {
            this.records.set(record, old_val + 1);
        } else {
            this.records.set(record, 1);
        }
        return true;
    }
    this.finish = function() {
        var NW = 0;
        for (var [record, count] of this.records) {
            if (__RBQLMP__top_count !== null && NW >= __RBQLMP__top_count)
                break;
            var new_record = count + output_delim + record + '\n';
            this.dst.write(new_record);
            NW += 1;
        }
    }
}


function SortedWriter(subwriter) {
    this.subwriter = subwriter;
    this.unsorted_entries = [];

    this.write = function(stable_entry) {
        this.unsorted_entries.push(stable_entry);
        return true;
    }

    this.finish = function() {
        var unsorted_entries = this.unsorted_entries;
        unsorted_entries.sort(stable_compare);
        if (__RBQLMP__reverse_flag)
            unsorted_entries.reverse();
        for (var i = 0; i < unsorted_entries.length; i++) {
            entry = unsorted_entries[i];
            if (!this.subwriter.write(entry[entry.length - 1]))
                break;
        }
        this.subwriter.finish();
    }
}


function BadFieldError(idx) {
    this.idx = idx;
    this.name = 'BadFieldError';
}


function safe_get(record, idx) {
    if (idx - 1 < record.length) {
        return record[idx - 1];
    }
    throw new BadFieldError(idx - 1);
}


function safe_set(record, idx, value) {
    if (idx - 1 < record.length) {
        record[idx - 1] = value;
    } else {
        throw new BadFieldError(idx - 1);
    }
}


function read_join_table(table_path) {
    var fields_max_len = 0;
    var content = fs.readFileSync(table_path, {encoding: csv_encoding});
    var lines = content.split('\n');
    var result = new Map();
    for (var i = 0; i < lines.length; i++) {
        var line = strip_cr(lines[i]);
        if (i + 1 == lines.length && line.length == 0)
            break;
        var split_result = join_split(line);
        var bfields = split_result[0];
        var warning = split_result[1];
        if (warning && !defective_csv_line_in_join)
            defective_csv_line_in_join = i + 1;
        var num_fields = bfields.length;
        if (!join_fields_info.hasOwnProperty(num_fields))
            join_fields_info[num_fields] = i + 1;
        fields_max_len = Math.max(fields_max_len, num_fields);
        var key = null;
        try {
            key = __RBQLMP__rhs_join_var;
        } catch (e) {
            if (e instanceof BadFieldError) {
                exit_with_error_msg('No "b' + (e.idx + 1) + '" column at line: ' + (i + 1) + ' in "B" table')
            }
        }
        var old_records = result.get(key);
        if (old_records == null) {
            result.set(key, [bfields]);
        } else {
            old_records.push(bfields);
        }
    }
    return [result, fields_max_len];
}


function generate_warnings() {
    var warnings = new Object();

    if (null_value_in_output)
        warnings['null_value_in_output'] = true;
    if (defective_csv_line_in_input)
        warnings['defective_csv_line_in_input'] = defective_csv_line_in_input;
    if (defective_csv_line_in_join)
        warnings['defective_csv_line_in_join'] = defective_csv_line_in_join;
    if (Object.keys(input_fields_info).length > 1)
        warnings['input_fields_info'] = input_fields_info;
    if (Object.keys(join_fields_info).length > 1)
        warnings['join_fields_info'] = join_fields_info;
    if (!Object.keys(warnings).length)
        return null;
    return JSON.stringify({'warnings': warnings});
}


var join_map = null;
var max_join_fields = null;
var null_record = null;

if (join_table_path !== null) {
    var join_params = read_join_table(join_table_path);
    join_map = join_params[0];
    max_join_fields = join_params[1];
    null_record = [Array(max_join_fields).fill(null)];
}


function null_join(lhs_key) {
    return null;
}

function inner_join(lhs_key) {
    result = join_map.get(lhs_key);
    if (result == null)
        return [];
    return result;
}


function left_join(lhs_key) {
    var result = join_map.get(lhs_key);
    if (result == null)
        return null_record;
    return result;
}


function strict_left_join(lhs_key) {
    var result = join_map.get(lhs_key);
    if (result == null || result.length != 1) {
        exit_with_error_msg('In "STRICT LEFT JOIN" each key in A must have exactly one match in B. Bad A key: "' + lhs_key + '"');
    }
    return result;
}


function replace_null_values(out_fields) {
    for (var i = 0; i < out_fields.length; i++) {
        if (out_fields[i] == null) {
            null_value_in_output = true;
            out_fields[i] = '';
        }
    }
}

var writer = new __RBQLMP__writer_type(dst_stream);
if (__RBQLMP__sort_flag) {
    writer = new SortedWriter(writer);
}


function process_update(NF, afields, rhs_records) {
    if (rhs_records != null && rhs_records.length > 1)
        exit_with_error_msg('More than one record in UPDATE query matched A-key in join table B at line: ' + NR);
    var bfields = null;
    if (rhs_records != null && rhs_records.length == 1)
        bfields = rhs_records[0];
    if ((rhs_records == null || rhs_records.length == 1) && (__RBQLMP__where_expression)) {
        __RBQLMP__update_statements
    }
    var out_fields = afields;
    replace_null_values(out_fields);
    var out_record = output_join(out_fields, output_delim);
    return writer.write(out_record);
}


function process_select(NF, afields, rhs_records) {
    if (rhs_records == null)
        rhs_records = [null];
    for (var i = 0; i < rhs_records.length; i++) {
        var bfields = rhs_records[i];
        var star_fields = afields;
        if (bfields != null)
            star_fields = afields.concat(bfields);
        if (!(__RBQLMP__where_expression))
            continue;
        var out_fields = __RBQLMP__select_expression;
        replace_null_values(out_fields);
        var out_record = output_join(out_fields, output_delim);
        if (__RBQLMP__sort_flag) {
            var sort_entry = [__RBQLMP__sort_key_expression, NR, out_record];
            if (!writer.write(sort_entry))
                return false;
        } else {
            if (!writer.write(out_record))
                return false;
        }
    }
    return true;
}


function process_line(line) {
    NR += 1;
    //readline strips last '\r'
    var split_result = input_split(line);
    var afields = split_result[0];
    var warning = split_result[1];
    if (warning && !defective_csv_line_in_input)
        defective_csv_line_in_input = NR;
    var NF = afields.length;
    if (!input_fields_info.hasOwnProperty(NF))
        input_fields_info[NF] = NR;
    try {
        rhs_records = null;
        if (join_map != null)
            rhs_records = __RBQLMP__join_function(__RBQLMP__lhs_join_var);
        if (!__RBQLMP__process_function(NF, afields, rhs_records)) {
            lineReader.close();
            return;
        }
    } catch (e) {
        if (e instanceof BadFieldError) {
            exit_with_error_msg('No "a' + (e.idx + 1) + '" column at line: ' + NR);
        }
        throw(e);
    }
}


function finish_processing() {
    writer.finish();
    var warnings_report = generate_warnings();
    if (warnings_report)
        process.stderr.write(warnings_report);
}


lineReader.on('line', process_line);
lineReader.on('close', finish_processing);

